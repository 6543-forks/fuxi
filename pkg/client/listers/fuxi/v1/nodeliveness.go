/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/yametech/fuxi/pkg/apis/fuxi/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeLivenessLister helps list NodeLivenesses.
type NodeLivenessLister interface {
	// List lists all NodeLivenesses in the indexer.
	List(selector labels.Selector) (ret []*v1.NodeLiveness, err error)
	// NodeLivenesses returns an object that can list and get NodeLivenesses.
	NodeLivenesses(namespace string) NodeLivenessNamespaceLister
	NodeLivenessListerExpansion
}

// nodeLivenessLister implements the NodeLivenessLister interface.
type nodeLivenessLister struct {
	indexer cache.Indexer
}

// NewNodeLivenessLister returns a new NodeLivenessLister.
func NewNodeLivenessLister(indexer cache.Indexer) NodeLivenessLister {
	return &nodeLivenessLister{indexer: indexer}
}

// List lists all NodeLivenesses in the indexer.
func (s *nodeLivenessLister) List(selector labels.Selector) (ret []*v1.NodeLiveness, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeLiveness))
	})
	return ret, err
}

// NodeLivenesses returns an object that can list and get NodeLivenesses.
func (s *nodeLivenessLister) NodeLivenesses(namespace string) NodeLivenessNamespaceLister {
	return nodeLivenessNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeLivenessNamespaceLister helps list and get NodeLivenesses.
type NodeLivenessNamespaceLister interface {
	// List lists all NodeLivenesses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.NodeLiveness, err error)
	// Get retrieves the NodeLiveness from the indexer for a given namespace and name.
	Get(name string) (*v1.NodeLiveness, error)
	NodeLivenessNamespaceListerExpansion
}

// nodeLivenessNamespaceLister implements the NodeLivenessNamespaceLister
// interface.
type nodeLivenessNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeLivenesses in the indexer for a given namespace.
func (s nodeLivenessNamespaceLister) List(selector labels.Selector) (ret []*v1.NodeLiveness, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeLiveness))
	})
	return ret, err
}

// Get retrieves the NodeLiveness from the indexer for a given namespace and name.
func (s nodeLivenessNamespaceLister) Get(name string) (*v1.NodeLiveness, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nodeliveness"), name)
	}
	return obj.(*v1.NodeLiveness), nil
}
