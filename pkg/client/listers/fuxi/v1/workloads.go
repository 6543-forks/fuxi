/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/yametech/fuxi/pkg/apis/fuxi/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkloadsLister helps list Workloadses.
type WorkloadsLister interface {
	// List lists all Workloadses in the indexer.
	List(selector labels.Selector) (ret []*v1.Workloads, err error)
	// Workloadses returns an object that can list and get Workloadses.
	Workloadses(namespace string) WorkloadsNamespaceLister
	WorkloadsListerExpansion
}

// workloadsLister implements the WorkloadsLister interface.
type workloadsLister struct {
	indexer cache.Indexer
}

// NewWorkloadsLister returns a new WorkloadsLister.
func NewWorkloadsLister(indexer cache.Indexer) WorkloadsLister {
	return &workloadsLister{indexer: indexer}
}

// List lists all Workloadses in the indexer.
func (s *workloadsLister) List(selector labels.Selector) (ret []*v1.Workloads, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Workloads))
	})
	return ret, err
}

// Workloadses returns an object that can list and get Workloadses.
func (s *workloadsLister) Workloadses(namespace string) WorkloadsNamespaceLister {
	return workloadsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkloadsNamespaceLister helps list and get Workloadses.
type WorkloadsNamespaceLister interface {
	// List lists all Workloadses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Workloads, err error)
	// Get retrieves the Workloads from the indexer for a given namespace and name.
	Get(name string) (*v1.Workloads, error)
	WorkloadsNamespaceListerExpansion
}

// workloadsNamespaceLister implements the WorkloadsNamespaceLister
// interface.
type workloadsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Workloadses in the indexer for a given namespace.
func (s workloadsNamespaceLister) List(selector labels.Selector) (ret []*v1.Workloads, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Workloads))
	})
	return ret, err
}

// Get retrieves the Workloads from the indexer for a given namespace and name.
func (s workloadsNamespaceLister) Get(name string) (*v1.Workloads, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("workloads"), name)
	}
	return obj.(*v1.Workloads), nil
}
