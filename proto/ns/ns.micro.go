// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/ns/ns.proto

package go_micro_srv_ns

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Interface API for Ns service

type NsService interface {
	CreateNameSpace(ctx context.Context, in *NS, opts ...client.CallOption) (*NSResponse, error)
	NamespaceList(ctx context.Context, in *Empty, opts ...client.CallOption) (*NamespaceListResponse, error)
	DeleteNamespace(ctx context.Context, in *NamespaceName, opts ...client.CallOption) (*Empty, error)
	EditNamespace(ctx context.Context, in *NS, opts ...client.CallOption) (*Empty, error)
}

type nsService struct {
	c    client.Client
	name string
}

func NewNsService(name string, c client.Client) NsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.ns"
	}
	return &nsService{
		c:    c,
		name: name,
	}
}

func (c *nsService) CreateNameSpace(ctx context.Context, in *NS, opts ...client.CallOption) (*NSResponse, error) {
	req := c.c.NewRequest(c.name, "Ns.CreateNameSpace", in)
	out := new(NSResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsService) NamespaceList(ctx context.Context, in *Empty, opts ...client.CallOption) (*NamespaceListResponse, error) {
	req := c.c.NewRequest(c.name, "Ns.NamespaceList", in)
	out := new(NamespaceListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsService) DeleteNamespace(ctx context.Context, in *NamespaceName, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Ns.DeleteNamespace", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsService) EditNamespace(ctx context.Context, in *NS, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Ns.EditNamespace", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ns service

type NsHandler interface {
	CreateNameSpace(context.Context, *NS, *NSResponse) error
	NamespaceList(context.Context, *Empty, *NamespaceListResponse) error
	DeleteNamespace(context.Context, *NamespaceName, *Empty) error
	EditNamespace(context.Context, *NS, *Empty) error
}

func RegisterNsHandler(s server.Server, hdlr NsHandler, opts ...server.HandlerOption) error {
	type ns interface {
		CreateNameSpace(ctx context.Context, in *NS, out *NSResponse) error
		NamespaceList(ctx context.Context, in *Empty, out *NamespaceListResponse) error
		DeleteNamespace(ctx context.Context, in *NamespaceName, out *Empty) error
		EditNamespace(ctx context.Context, in *NS, out *Empty) error
	}
	type Ns struct {
		ns
	}
	h := &nsHandler{hdlr}
	return s.Handle(s.NewHandler(&Ns{h}, opts...))
}

type nsHandler struct {
	NsHandler
}

func (h *nsHandler) CreateNameSpace(ctx context.Context, in *NS, out *NSResponse) error {
	return h.NsHandler.CreateNameSpace(ctx, in, out)
}

func (h *nsHandler) NamespaceList(ctx context.Context, in *Empty, out *NamespaceListResponse) error {
	return h.NsHandler.NamespaceList(ctx, in, out)
}

func (h *nsHandler) DeleteNamespace(ctx context.Context, in *NamespaceName, out *Empty) error {
	return h.NsHandler.DeleteNamespace(ctx, in, out)
}

func (h *nsHandler) EditNamespace(ctx context.Context, in *NS, out *Empty) error {
	return h.NsHandler.EditNamespace(ctx, in, out)
}
